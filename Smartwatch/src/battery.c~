#include "battery.h"

static uint8_t ADC_FlagStatus(uint16_t flag);
//static void ADC_ClearFlag(uint16_t flag);

float batteryVoltage = 10;

void battery_ADC_Init(void){
    
    // Enable GPIOA peripheral clock
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    // Enable ADC1 peripheral clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;

    /* GPIO configuration */
    
    // MODER register configuration
    GPIOA->MODER |= MODER2_VALUE << MODER2_OFFSET;
    // OSPEEDR register configuration
    GPIOA->OSPEEDR |= OSPEEDR2_VALUE << OSPEEDR2_OFFSET;

    /* NVIC configuration */

    // ISER0 register configuration
    NVIC->ISER[0] |= RS17_VALUE << RS17_OFFSET;
    NVIC->IP[IP17_OFFSET] |= IP17_VALUE;

    /* ADC1 configuration */

    // CR1 register configuration
    ADC1->CR1 |= (PDI_VALUE << PDI_OFFSET) | (EOCIE_VALUE << EOCIE_OFFSET);
    // SMPR3 register configuration
    ADC1->SMPR3 |= SMP2_VALUE << SMP2_OFFSET;
    // SQR5 register configuration
    ADC1->SQR5 |= SQ1_VALUE << SQ1_OFFSET;
    // CR2 register configuration
    ADC1->CR2 |= (EOCS_VALUE << EOCS_OFFSET) | (ADON_VALUE << ADON_OFFSET);

}

void startBattery_ADC_Conversion(void){

    // Wait until ADC is ready to convert
    while(!ADC_FlagStatus(ADC_SR_ADONS) || !ADC_FlagStatus(ADC_SR_EOC));
    // Start conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;

}

static uint8_t ADC_FlagStatus(uint16_t flag){
    if(!(ADC1->SR & flag))
        return 0;
    return 1;
}

/*static void ADC_ClearFlag(uint16_t flag){

    return ADC1->SR = ~(uint32_t)flag;

}*/

void ADC1_IRQHandler(void){   

    //ADC_ClearFlag();

    batteryVoltage = 12;

}
